/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package airoutputcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class RefillSubDedicatedAccount implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private MoneyAmount refillDivisionAmount = null;
	private MoneyAmount refillPromoDivisionAmount = null;
	private MoneyAmount accountBalance = null;
	private Date accountExpiryDate = null;
	private Date accountStartDate = null;
	private Units refillDivisionUnits = null;
	private Units refillPromoDivisionUnits = null;
	private Units unitBalance = null;
	
	public RefillSubDedicatedAccount() {
	}

	public RefillSubDedicatedAccount(byte[] code) {
		this.code = code;
	}

	public void setRefillDivisionAmount(MoneyAmount refillDivisionAmount) {
		this.refillDivisionAmount = refillDivisionAmount;
	}

	public MoneyAmount getRefillDivisionAmount() {
		return refillDivisionAmount;
	}

	public void setRefillPromoDivisionAmount(MoneyAmount refillPromoDivisionAmount) {
		this.refillPromoDivisionAmount = refillPromoDivisionAmount;
	}

	public MoneyAmount getRefillPromoDivisionAmount() {
		return refillPromoDivisionAmount;
	}

	public void setAccountBalance(MoneyAmount accountBalance) {
		this.accountBalance = accountBalance;
	}

	public MoneyAmount getAccountBalance() {
		return accountBalance;
	}

	public void setAccountExpiryDate(Date accountExpiryDate) {
		this.accountExpiryDate = accountExpiryDate;
	}

	public Date getAccountExpiryDate() {
		return accountExpiryDate;
	}

	public void setAccountStartDate(Date accountStartDate) {
		this.accountStartDate = accountStartDate;
	}

	public Date getAccountStartDate() {
		return accountStartDate;
	}

	public void setRefillDivisionUnits(Units refillDivisionUnits) {
		this.refillDivisionUnits = refillDivisionUnits;
	}

	public Units getRefillDivisionUnits() {
		return refillDivisionUnits;
	}

	public void setRefillPromoDivisionUnits(Units refillPromoDivisionUnits) {
		this.refillPromoDivisionUnits = refillPromoDivisionUnits;
	}

	public Units getRefillPromoDivisionUnits() {
		return refillPromoDivisionUnits;
	}

	public void setUnitBalance(Units unitBalance) {
		this.unitBalance = unitBalance;
	}

	public Units getUnitBalance() {
		return unitBalance;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (unitBalance != null) {
			codeLength += unitBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (refillPromoDivisionUnits != null) {
			codeLength += refillPromoDivisionUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (refillDivisionUnits != null) {
			codeLength += refillDivisionUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (accountStartDate != null) {
			codeLength += accountStartDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (accountExpiryDate != null) {
			codeLength += accountExpiryDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (accountBalance != null) {
			codeLength += accountBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		if (refillPromoDivisionAmount != null) {
			codeLength += refillPromoDivisionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		if (refillDivisionAmount != null) {
			codeLength += refillDivisionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			refillDivisionAmount = new MoneyAmount();
			subCodeLength += refillDivisionAmount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			refillPromoDivisionAmount = new MoneyAmount();
			subCodeLength += refillPromoDivisionAmount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			accountBalance = new MoneyAmount();
			subCodeLength += accountBalance.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			accountExpiryDate = new Date();
			subCodeLength += accountExpiryDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			accountStartDate = new Date();
			subCodeLength += accountStartDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			refillDivisionUnits = new Units();
			subCodeLength += refillDivisionUnits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			refillPromoDivisionUnits = new Units();
			subCodeLength += refillPromoDivisionUnits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			unitBalance = new Units();
			subCodeLength += unitBalance.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (refillDivisionAmount != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillDivisionAmount: ").append(refillDivisionAmount);
			firstSelectedElement = false;
		}
		
		if (refillPromoDivisionAmount != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillPromoDivisionAmount: ").append(refillPromoDivisionAmount);
			firstSelectedElement = false;
		}
		
		if (accountBalance != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountBalance: ").append(accountBalance);
			firstSelectedElement = false;
		}
		
		if (accountExpiryDate != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountExpiryDate: ").append(accountExpiryDate);
			firstSelectedElement = false;
		}
		
		if (accountStartDate != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountStartDate: ").append(accountStartDate);
			firstSelectedElement = false;
		}
		
		if (refillDivisionUnits != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillDivisionUnits: ").append(refillDivisionUnits);
			firstSelectedElement = false;
		}
		
		if (refillPromoDivisionUnits != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillPromoDivisionUnits: ").append(refillPromoDivisionUnits);
			firstSelectedElement = false;
		}
		
		if (unitBalance != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("unitBalance: ").append(unitBalance);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

