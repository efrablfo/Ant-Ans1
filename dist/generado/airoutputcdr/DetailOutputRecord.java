/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package airoutputcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class DetailOutputRecord implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private AdjustmentRecordV2 adjustmentRecordV2 = null;
	private OfflinePromotionRecordV2 offlinepromotionRecordV2 = null;
	private RefillRecordV2 refillRecordV2 = null;
	private ErrorRecordV2 errorRecordV2 = null;
	
	public DetailOutputRecord() {
	}

	public DetailOutputRecord(byte[] code) {
		this.code = code;
	}

	public void setAdjustmentRecordV2(AdjustmentRecordV2 adjustmentRecordV2) {
		this.adjustmentRecordV2 = adjustmentRecordV2;
	}

	public AdjustmentRecordV2 getAdjustmentRecordV2() {
		return adjustmentRecordV2;
	}

	public void setOfflinepromotionRecordV2(OfflinePromotionRecordV2 offlinepromotionRecordV2) {
		this.offlinepromotionRecordV2 = offlinepromotionRecordV2;
	}

	public OfflinePromotionRecordV2 getOfflinepromotionRecordV2() {
		return offlinepromotionRecordV2;
	}

	public void setRefillRecordV2(RefillRecordV2 refillRecordV2) {
		this.refillRecordV2 = refillRecordV2;
	}

	public RefillRecordV2 getRefillRecordV2() {
		return refillRecordV2;
	}

	public void setErrorRecordV2(ErrorRecordV2 errorRecordV2) {
		this.errorRecordV2 = errorRecordV2;
	}

	public ErrorRecordV2 getErrorRecordV2() {
		return errorRecordV2;
	}

	public int encode(OutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (errorRecordV2 != null) {
			codeLength += errorRecordV2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			os.write(0xA7);
			codeLength += 1;
			return codeLength;
		}
		
		if (refillRecordV2 != null) {
			codeLength += refillRecordV2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			os.write(0xA6);
			codeLength += 1;
			return codeLength;
		}
		
		if (offlinepromotionRecordV2 != null) {
			codeLength += offlinepromotionRecordV2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
			return codeLength;
		}
		
		if (adjustmentRecordV2 != null) {
			codeLength += adjustmentRecordV2.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			adjustmentRecordV2 = new AdjustmentRecordV2();
			codeLength += adjustmentRecordV2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			offlinepromotionRecordV2 = new OfflinePromotionRecordV2();
			codeLength += offlinepromotionRecordV2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			refillRecordV2 = new RefillRecordV2();
			codeLength += refillRecordV2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			errorRecordV2 = new ErrorRecordV2();
			codeLength += errorRecordV2.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (adjustmentRecordV2 != null) {
			sb.append("adjustmentRecordV2: ");
			adjustmentRecordV2.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (offlinepromotionRecordV2 != null) {
			sb.append("offlinepromotionRecordV2: ");
			offlinepromotionRecordV2.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (refillRecordV2 != null) {
			sb.append("refillRecordV2: ");
			refillRecordV2.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (errorRecordV2 != null) {
			sb.append("errorRecordV2: ");
			errorRecordV2.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

