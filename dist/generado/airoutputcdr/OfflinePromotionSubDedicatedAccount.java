/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package airoutputcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class OfflinePromotionSubDedicatedAccount implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private MoneyAmount promotionDivisionAmount = null;
	private MoneyAmount accountBalance = null;
	private Date accountExpiryDateBefore = null;
	private Date accountExpiryDateAfter = null;
	private Date accountStartDateBefore = null;
	private Date accountStartDateAfter = null;
	private Units promotionDivisionUnits = null;
	private Units unitBalance = null;
	
	public OfflinePromotionSubDedicatedAccount() {
	}

	public OfflinePromotionSubDedicatedAccount(byte[] code) {
		this.code = code;
	}

	public void setPromotionDivisionAmount(MoneyAmount promotionDivisionAmount) {
		this.promotionDivisionAmount = promotionDivisionAmount;
	}

	public MoneyAmount getPromotionDivisionAmount() {
		return promotionDivisionAmount;
	}

	public void setAccountBalance(MoneyAmount accountBalance) {
		this.accountBalance = accountBalance;
	}

	public MoneyAmount getAccountBalance() {
		return accountBalance;
	}

	public void setAccountExpiryDateBefore(Date accountExpiryDateBefore) {
		this.accountExpiryDateBefore = accountExpiryDateBefore;
	}

	public Date getAccountExpiryDateBefore() {
		return accountExpiryDateBefore;
	}

	public void setAccountExpiryDateAfter(Date accountExpiryDateAfter) {
		this.accountExpiryDateAfter = accountExpiryDateAfter;
	}

	public Date getAccountExpiryDateAfter() {
		return accountExpiryDateAfter;
	}

	public void setAccountStartDateBefore(Date accountStartDateBefore) {
		this.accountStartDateBefore = accountStartDateBefore;
	}

	public Date getAccountStartDateBefore() {
		return accountStartDateBefore;
	}

	public void setAccountStartDateAfter(Date accountStartDateAfter) {
		this.accountStartDateAfter = accountStartDateAfter;
	}

	public Date getAccountStartDateAfter() {
		return accountStartDateAfter;
	}

	public void setPromotionDivisionUnits(Units promotionDivisionUnits) {
		this.promotionDivisionUnits = promotionDivisionUnits;
	}

	public Units getPromotionDivisionUnits() {
		return promotionDivisionUnits;
	}

	public void setUnitBalance(Units unitBalance) {
		this.unitBalance = unitBalance;
	}

	public Units getUnitBalance() {
		return unitBalance;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (unitBalance != null) {
			codeLength += unitBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			os.write(0x89);
			codeLength += 1;
		}
		
		if (promotionDivisionUnits != null) {
			codeLength += promotionDivisionUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (accountStartDateAfter != null) {
			codeLength += accountStartDateAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (accountStartDateBefore != null) {
			codeLength += accountStartDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (accountExpiryDateAfter != null) {
			codeLength += accountExpiryDateAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (accountExpiryDateBefore != null) {
			codeLength += accountExpiryDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (accountBalance != null) {
			codeLength += accountBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		if (promotionDivisionAmount != null) {
			codeLength += promotionDivisionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			promotionDivisionAmount = new MoneyAmount();
			subCodeLength += promotionDivisionAmount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			accountBalance = new MoneyAmount();
			subCodeLength += accountBalance.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			accountExpiryDateBefore = new Date();
			subCodeLength += accountExpiryDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			accountExpiryDateAfter = new Date();
			subCodeLength += accountExpiryDateAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			accountStartDateBefore = new Date();
			subCodeLength += accountStartDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			accountStartDateAfter = new Date();
			subCodeLength += accountStartDateAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			promotionDivisionUnits = new Units();
			subCodeLength += promotionDivisionUnits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			unitBalance = new Units();
			subCodeLength += unitBalance.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (promotionDivisionAmount != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionDivisionAmount: ").append(promotionDivisionAmount);
			firstSelectedElement = false;
		}
		
		if (accountBalance != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountBalance: ").append(accountBalance);
			firstSelectedElement = false;
		}
		
		if (accountExpiryDateBefore != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountExpiryDateBefore: ").append(accountExpiryDateBefore);
			firstSelectedElement = false;
		}
		
		if (accountExpiryDateAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountExpiryDateAfter: ").append(accountExpiryDateAfter);
			firstSelectedElement = false;
		}
		
		if (accountStartDateBefore != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountStartDateBefore: ").append(accountStartDateBefore);
			firstSelectedElement = false;
		}
		
		if (accountStartDateAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountStartDateAfter: ").append(accountStartDateAfter);
			firstSelectedElement = false;
		}
		
		if (promotionDivisionUnits != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionDivisionUnits: ").append(promotionDivisionUnits);
			firstSelectedElement = false;
		}
		
		if (unitBalance != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("unitBalance: ").append(unitBalance);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

