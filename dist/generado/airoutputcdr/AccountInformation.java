/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package airoutputcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class AccountInformation implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class DedicatedAccounts implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RefillDedicatedAccountV2> seqOf = null;

		public DedicatedAccounts() {
			seqOf = new ArrayList<RefillDedicatedAccountV2>();
		}

		public DedicatedAccounts(byte[] code) {
			this.code = code;
		}

		public List<RefillDedicatedAccountV2> getRefillDedicatedAccountV2() {
			if (seqOf == null) {
				seqOf = new ArrayList<RefillDedicatedAccountV2>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				RefillDedicatedAccountV2 element = new RefillDedicatedAccountV2();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RefillDedicatedAccountV2> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class UsageAccumulator implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RefillUsageAccumulator> seqOf = null;

		public UsageAccumulator() {
			seqOf = new ArrayList<RefillUsageAccumulator>();
		}

		public UsageAccumulator(byte[] code) {
			this.code = code;
		}

		public List<RefillUsageAccumulator> getRefillUsageAccumulator() {
			if (seqOf == null) {
				seqOf = new ArrayList<RefillUsageAccumulator>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				RefillUsageAccumulator element = new RefillUsageAccumulator();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RefillUsageAccumulator> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class Offers implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RefillOffer> seqOf = null;

		public Offers() {
			seqOf = new ArrayList<RefillOffer>();
		}

		public Offers(byte[] code) {
			this.code = code;
		}

		public List<RefillOffer> getRefillOffer() {
			if (seqOf == null) {
				seqOf = new ArrayList<RefillOffer>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				RefillOffer element = new RefillOffer();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RefillOffer> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private AccountFlags accountFlags = null;
	private MoneyAmount accountBalance = null;
	private MoneyAmount accumulatedRefillValue = null;
	private BerInteger accumulatedRefillCounter = null;
	private MoneyAmount accumulatedProgressionValue = null;
	private BerInteger accumulatedProgressionCounter = null;
	private BerInteger creditClearancePeriod = null;
	private DedicatedAccounts dedicatedAccounts = null;
	private PromotionPlanID promotionPlan = null;
	private ServiceClass permanentServiceClass = null;
	private ServiceClass temporaryServiceClass = null;
	private Date temporaryServiceClassExpiryDate = null;
	private RefillOption refillOption = null;
	private Date serviceFeeExpiryDate = null;
	private BerInteger serviceRemovalGracePeriod = null;
	private BerInteger serviceOffering = null;
	private Date supervisionExpiryDate = null;
	private UsageAccumulator usageAccumulator = null;
	private BerInteger communityID1 = null;
	private BerInteger communityID2 = null;
	private BerInteger communityID3 = null;
	private Offers offers = null;
	
	public AccountInformation() {
	}

	public AccountInformation(byte[] code) {
		this.code = code;
	}

	public void setAccountFlags(AccountFlags accountFlags) {
		this.accountFlags = accountFlags;
	}

	public AccountFlags getAccountFlags() {
		return accountFlags;
	}

	public void setAccountBalance(MoneyAmount accountBalance) {
		this.accountBalance = accountBalance;
	}

	public MoneyAmount getAccountBalance() {
		return accountBalance;
	}

	public void setAccumulatedRefillValue(MoneyAmount accumulatedRefillValue) {
		this.accumulatedRefillValue = accumulatedRefillValue;
	}

	public MoneyAmount getAccumulatedRefillValue() {
		return accumulatedRefillValue;
	}

	public void setAccumulatedRefillCounter(BerInteger accumulatedRefillCounter) {
		this.accumulatedRefillCounter = accumulatedRefillCounter;
	}

	public BerInteger getAccumulatedRefillCounter() {
		return accumulatedRefillCounter;
	}

	public void setAccumulatedProgressionValue(MoneyAmount accumulatedProgressionValue) {
		this.accumulatedProgressionValue = accumulatedProgressionValue;
	}

	public MoneyAmount getAccumulatedProgressionValue() {
		return accumulatedProgressionValue;
	}

	public void setAccumulatedProgressionCounter(BerInteger accumulatedProgressionCounter) {
		this.accumulatedProgressionCounter = accumulatedProgressionCounter;
	}

	public BerInteger getAccumulatedProgressionCounter() {
		return accumulatedProgressionCounter;
	}

	public void setCreditClearancePeriod(BerInteger creditClearancePeriod) {
		this.creditClearancePeriod = creditClearancePeriod;
	}

	public BerInteger getCreditClearancePeriod() {
		return creditClearancePeriod;
	}

	public void setDedicatedAccounts(DedicatedAccounts dedicatedAccounts) {
		this.dedicatedAccounts = dedicatedAccounts;
	}

	public DedicatedAccounts getDedicatedAccounts() {
		return dedicatedAccounts;
	}

	public void setPromotionPlan(PromotionPlanID promotionPlan) {
		this.promotionPlan = promotionPlan;
	}

	public PromotionPlanID getPromotionPlan() {
		return promotionPlan;
	}

	public void setPermanentServiceClass(ServiceClass permanentServiceClass) {
		this.permanentServiceClass = permanentServiceClass;
	}

	public ServiceClass getPermanentServiceClass() {
		return permanentServiceClass;
	}

	public void setTemporaryServiceClass(ServiceClass temporaryServiceClass) {
		this.temporaryServiceClass = temporaryServiceClass;
	}

	public ServiceClass getTemporaryServiceClass() {
		return temporaryServiceClass;
	}

	public void setTemporaryServiceClassExpiryDate(Date temporaryServiceClassExpiryDate) {
		this.temporaryServiceClassExpiryDate = temporaryServiceClassExpiryDate;
	}

	public Date getTemporaryServiceClassExpiryDate() {
		return temporaryServiceClassExpiryDate;
	}

	public void setRefillOption(RefillOption refillOption) {
		this.refillOption = refillOption;
	}

	public RefillOption getRefillOption() {
		return refillOption;
	}

	public void setServiceFeeExpiryDate(Date serviceFeeExpiryDate) {
		this.serviceFeeExpiryDate = serviceFeeExpiryDate;
	}

	public Date getServiceFeeExpiryDate() {
		return serviceFeeExpiryDate;
	}

	public void setServiceRemovalGracePeriod(BerInteger serviceRemovalGracePeriod) {
		this.serviceRemovalGracePeriod = serviceRemovalGracePeriod;
	}

	public BerInteger getServiceRemovalGracePeriod() {
		return serviceRemovalGracePeriod;
	}

	public void setServiceOffering(BerInteger serviceOffering) {
		this.serviceOffering = serviceOffering;
	}

	public BerInteger getServiceOffering() {
		return serviceOffering;
	}

	public void setSupervisionExpiryDate(Date supervisionExpiryDate) {
		this.supervisionExpiryDate = supervisionExpiryDate;
	}

	public Date getSupervisionExpiryDate() {
		return supervisionExpiryDate;
	}

	public void setUsageAccumulator(UsageAccumulator usageAccumulator) {
		this.usageAccumulator = usageAccumulator;
	}

	public UsageAccumulator getUsageAccumulator() {
		return usageAccumulator;
	}

	public void setCommunityID1(BerInteger communityID1) {
		this.communityID1 = communityID1;
	}

	public BerInteger getCommunityID1() {
		return communityID1;
	}

	public void setCommunityID2(BerInteger communityID2) {
		this.communityID2 = communityID2;
	}

	public BerInteger getCommunityID2() {
		return communityID2;
	}

	public void setCommunityID3(BerInteger communityID3) {
		this.communityID3 = communityID3;
	}

	public BerInteger getCommunityID3() {
		return communityID3;
	}

	public void setOffers(Offers offers) {
		this.offers = offers;
	}

	public Offers getOffers() {
		return offers;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (offers != null) {
			codeLength += offers.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			os.write(0xB5);
			codeLength += 1;
		}
		
		if (communityID3 != null) {
			codeLength += communityID3.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			os.write(0x94);
			codeLength += 1;
		}
		
		if (communityID2 != null) {
			codeLength += communityID2.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			os.write(0x93);
			codeLength += 1;
		}
		
		if (communityID1 != null) {
			codeLength += communityID1.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			os.write(0x92);
			codeLength += 1;
		}
		
		if (usageAccumulator != null) {
			codeLength += usageAccumulator.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			os.write(0xB1);
			codeLength += 1;
		}
		
		if (supervisionExpiryDate != null) {
			codeLength += supervisionExpiryDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			os.write(0x90);
			codeLength += 1;
		}
		
		if (serviceOffering != null) {
			codeLength += serviceOffering.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			os.write(0x8F);
			codeLength += 1;
		}
		
		if (serviceRemovalGracePeriod != null) {
			codeLength += serviceRemovalGracePeriod.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			os.write(0x8E);
			codeLength += 1;
		}
		
		if (serviceFeeExpiryDate != null) {
			codeLength += serviceFeeExpiryDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			os.write(0x8D);
			codeLength += 1;
		}
		
		if (refillOption != null) {
			codeLength += refillOption.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			os.write(0x8C);
			codeLength += 1;
		}
		
		if (temporaryServiceClassExpiryDate != null) {
			codeLength += temporaryServiceClassExpiryDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			os.write(0x8B);
			codeLength += 1;
		}
		
		if (temporaryServiceClass != null) {
			codeLength += temporaryServiceClass.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			os.write(0x8A);
			codeLength += 1;
		}
		
		codeLength += permanentServiceClass.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 9
		os.write(0x89);
		codeLength += 1;
		
		if (promotionPlan != null) {
			codeLength += promotionPlan.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (dedicatedAccounts != null) {
			codeLength += dedicatedAccounts.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			os.write(0xA7);
			codeLength += 1;
		}
		
		if (creditClearancePeriod != null) {
			codeLength += creditClearancePeriod.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (accumulatedProgressionCounter != null) {
			codeLength += accumulatedProgressionCounter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (accumulatedProgressionValue != null) {
			codeLength += accumulatedProgressionValue.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (accumulatedRefillCounter != null) {
			codeLength += accumulatedRefillCounter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
		}
		
		if (accumulatedRefillValue != null) {
			codeLength += accumulatedRefillValue.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		if (accountBalance != null) {
			codeLength += accountBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		codeLength += accountFlags.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			accountFlags = new AccountFlags();
			subCodeLength += accountFlags.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			accountBalance = new MoneyAmount();
			subCodeLength += accountBalance.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			accumulatedRefillValue = new MoneyAmount();
			subCodeLength += accumulatedRefillValue.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			accumulatedRefillCounter = new BerInteger();
			subCodeLength += accumulatedRefillCounter.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			accumulatedProgressionValue = new MoneyAmount();
			subCodeLength += accumulatedProgressionValue.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			accumulatedProgressionCounter = new BerInteger();
			subCodeLength += accumulatedProgressionCounter.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			creditClearancePeriod = new BerInteger();
			subCodeLength += creditClearancePeriod.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			dedicatedAccounts = new DedicatedAccounts();
			subCodeLength += dedicatedAccounts.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			promotionPlan = new PromotionPlanID();
			subCodeLength += promotionPlan.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			permanentServiceClass = new ServiceClass();
			subCodeLength += permanentServiceClass.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			temporaryServiceClass = new ServiceClass();
			subCodeLength += temporaryServiceClass.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			temporaryServiceClassExpiryDate = new Date();
			subCodeLength += temporaryServiceClassExpiryDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			refillOption = new RefillOption();
			subCodeLength += refillOption.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			serviceFeeExpiryDate = new Date();
			subCodeLength += serviceFeeExpiryDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			serviceRemovalGracePeriod = new BerInteger();
			subCodeLength += serviceRemovalGracePeriod.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			serviceOffering = new BerInteger();
			subCodeLength += serviceOffering.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			supervisionExpiryDate = new Date();
			subCodeLength += supervisionExpiryDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			usageAccumulator = new UsageAccumulator();
			subCodeLength += usageAccumulator.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			communityID1 = new BerInteger();
			subCodeLength += communityID1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			communityID2 = new BerInteger();
			subCodeLength += communityID2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			communityID3 = new BerInteger();
			subCodeLength += communityID3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			offers = new Offers();
			subCodeLength += offers.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountFlags != null) {
			sb.append("accountFlags: ").append(accountFlags);
		}
		else {
			sb.append("accountFlags: <empty-required-field>");
		}
		
		if (accountBalance != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountBalance: ").append(accountBalance);
		}
		
		if (accumulatedRefillValue != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatedRefillValue: ").append(accumulatedRefillValue);
		}
		
		if (accumulatedRefillCounter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatedRefillCounter: ").append(accumulatedRefillCounter);
		}
		
		if (accumulatedProgressionValue != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatedProgressionValue: ").append(accumulatedProgressionValue);
		}
		
		if (accumulatedProgressionCounter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatedProgressionCounter: ").append(accumulatedProgressionCounter);
		}
		
		if (creditClearancePeriod != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("creditClearancePeriod: ").append(creditClearancePeriod);
		}
		
		if (dedicatedAccounts != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccounts: ");
			dedicatedAccounts.appendAsString(sb, indentLevel + 1);
		}
		
		if (promotionPlan != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionPlan: ").append(promotionPlan);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (permanentServiceClass != null) {
			sb.append("permanentServiceClass: ").append(permanentServiceClass);
		}
		else {
			sb.append("permanentServiceClass: <empty-required-field>");
		}
		
		if (temporaryServiceClass != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("temporaryServiceClass: ").append(temporaryServiceClass);
		}
		
		if (temporaryServiceClassExpiryDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("temporaryServiceClassExpiryDate: ").append(temporaryServiceClassExpiryDate);
		}
		
		if (refillOption != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillOption: ").append(refillOption);
		}
		
		if (serviceFeeExpiryDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceFeeExpiryDate: ").append(serviceFeeExpiryDate);
		}
		
		if (serviceRemovalGracePeriod != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceRemovalGracePeriod: ").append(serviceRemovalGracePeriod);
		}
		
		if (serviceOffering != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceOffering: ").append(serviceOffering);
		}
		
		if (supervisionExpiryDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supervisionExpiryDate: ").append(supervisionExpiryDate);
		}
		
		if (usageAccumulator != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usageAccumulator: ");
			usageAccumulator.appendAsString(sb, indentLevel + 1);
		}
		
		if (communityID1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("communityID1: ").append(communityID1);
		}
		
		if (communityID2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("communityID2: ").append(communityID2);
		}
		
		if (communityID3 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("communityID3: ").append(communityID3);
		}
		
		if (offers != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offers: ");
			offers.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

