/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package airoutputcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class AdjustmentRecordV2 implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class DedicatedAccounts implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<AdjustmentDedicatedAccountV2> seqOf = null;

		public DedicatedAccounts() {
			seqOf = new ArrayList<AdjustmentDedicatedAccountV2>();
		}

		public DedicatedAccounts(byte[] code) {
			this.code = code;
		}

		public List<AdjustmentDedicatedAccountV2> getAdjustmentDedicatedAccountV2() {
			if (seqOf == null) {
				seqOf = new ArrayList<AdjustmentDedicatedAccountV2>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				AdjustmentDedicatedAccountV2 element = new AdjustmentDedicatedAccountV2();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<AdjustmentDedicatedAccountV2> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private NodeType originNodeType = null;
	private IDString originHostName = null;
	private IDString originFileID = null;
	private TransactionID originTransactionID = null;
	private IDString originOperatorID = null;
	private TimeStamp originTimeStamp = null;
	private NodeID hostName = null;
	private LocalSequenceNumber localSequenceNumber = null;
	private TimeStamp timeStamp = null;
	private ServiceClass currentServiceClass = null;
	private TransactionType transactionType = null;
	private TransactionCode transactionCode = null;
	private MoneyAmount transactionAmount = null;
	private Currency transactionCurrency = null;
	private NumberString accountNumber = null;
	private Currency accountCurrency = null;
	private MoneyAmount adjustmentAmount = null;
	private NumberString subscriberNumber = null;
	private MoneyAmount accountBalance = null;
	private Date negativeBalanceBarringDate = null;
	private AccountFlags accountFlagsBefore = null;
	private AccountFlags accountFlagsAfter = null;
	private AccountGroupId accountGroupId = null;
	private ExternalDataString externalData1 = null;
	private ExternalDataString externalData2 = null;
	private BerInteger creditClearancePeriodBefore = null;
	private BerInteger creditClearancePeriodAfter = null;
	private Date serviceFeeDateBefore = null;
	private Date serviceFeeDateAfter = null;
	private BerInteger serviceFeeDaysSurplus = null;
	private DedicatedAccounts dedicatedAccounts = null;
	private CellIdentifier cellIdentifier = null;
	
	public AdjustmentRecordV2() {
	}

	public AdjustmentRecordV2(byte[] code) {
		this.code = code;
	}

	public void setOriginNodeType(NodeType originNodeType) {
		this.originNodeType = originNodeType;
	}

	public NodeType getOriginNodeType() {
		return originNodeType;
	}

	public void setOriginHostName(IDString originHostName) {
		this.originHostName = originHostName;
	}

	public IDString getOriginHostName() {
		return originHostName;
	}

	public void setOriginFileID(IDString originFileID) {
		this.originFileID = originFileID;
	}

	public IDString getOriginFileID() {
		return originFileID;
	}

	public void setOriginTransactionID(TransactionID originTransactionID) {
		this.originTransactionID = originTransactionID;
	}

	public TransactionID getOriginTransactionID() {
		return originTransactionID;
	}

	public void setOriginOperatorID(IDString originOperatorID) {
		this.originOperatorID = originOperatorID;
	}

	public IDString getOriginOperatorID() {
		return originOperatorID;
	}

	public void setOriginTimeStamp(TimeStamp originTimeStamp) {
		this.originTimeStamp = originTimeStamp;
	}

	public TimeStamp getOriginTimeStamp() {
		return originTimeStamp;
	}

	public void setHostName(NodeID hostName) {
		this.hostName = hostName;
	}

	public NodeID getHostName() {
		return hostName;
	}

	public void setLocalSequenceNumber(LocalSequenceNumber localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public LocalSequenceNumber getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setTimeStamp(TimeStamp timeStamp) {
		this.timeStamp = timeStamp;
	}

	public TimeStamp getTimeStamp() {
		return timeStamp;
	}

	public void setCurrentServiceClass(ServiceClass currentServiceClass) {
		this.currentServiceClass = currentServiceClass;
	}

	public ServiceClass getCurrentServiceClass() {
		return currentServiceClass;
	}

	public void setTransactionType(TransactionType transactionType) {
		this.transactionType = transactionType;
	}

	public TransactionType getTransactionType() {
		return transactionType;
	}

	public void setTransactionCode(TransactionCode transactionCode) {
		this.transactionCode = transactionCode;
	}

	public TransactionCode getTransactionCode() {
		return transactionCode;
	}

	public void setTransactionAmount(MoneyAmount transactionAmount) {
		this.transactionAmount = transactionAmount;
	}

	public MoneyAmount getTransactionAmount() {
		return transactionAmount;
	}

	public void setTransactionCurrency(Currency transactionCurrency) {
		this.transactionCurrency = transactionCurrency;
	}

	public Currency getTransactionCurrency() {
		return transactionCurrency;
	}

	public void setAccountNumber(NumberString accountNumber) {
		this.accountNumber = accountNumber;
	}

	public NumberString getAccountNumber() {
		return accountNumber;
	}

	public void setAccountCurrency(Currency accountCurrency) {
		this.accountCurrency = accountCurrency;
	}

	public Currency getAccountCurrency() {
		return accountCurrency;
	}

	public void setAdjustmentAmount(MoneyAmount adjustmentAmount) {
		this.adjustmentAmount = adjustmentAmount;
	}

	public MoneyAmount getAdjustmentAmount() {
		return adjustmentAmount;
	}

	public void setSubscriberNumber(NumberString subscriberNumber) {
		this.subscriberNumber = subscriberNumber;
	}

	public NumberString getSubscriberNumber() {
		return subscriberNumber;
	}

	public void setAccountBalance(MoneyAmount accountBalance) {
		this.accountBalance = accountBalance;
	}

	public MoneyAmount getAccountBalance() {
		return accountBalance;
	}

	public void setNegativeBalanceBarringDate(Date negativeBalanceBarringDate) {
		this.negativeBalanceBarringDate = negativeBalanceBarringDate;
	}

	public Date getNegativeBalanceBarringDate() {
		return negativeBalanceBarringDate;
	}

	public void setAccountFlagsBefore(AccountFlags accountFlagsBefore) {
		this.accountFlagsBefore = accountFlagsBefore;
	}

	public AccountFlags getAccountFlagsBefore() {
		return accountFlagsBefore;
	}

	public void setAccountFlagsAfter(AccountFlags accountFlagsAfter) {
		this.accountFlagsAfter = accountFlagsAfter;
	}

	public AccountFlags getAccountFlagsAfter() {
		return accountFlagsAfter;
	}

	public void setAccountGroupId(AccountGroupId accountGroupId) {
		this.accountGroupId = accountGroupId;
	}

	public AccountGroupId getAccountGroupId() {
		return accountGroupId;
	}

	public void setExternalData1(ExternalDataString externalData1) {
		this.externalData1 = externalData1;
	}

	public ExternalDataString getExternalData1() {
		return externalData1;
	}

	public void setExternalData2(ExternalDataString externalData2) {
		this.externalData2 = externalData2;
	}

	public ExternalDataString getExternalData2() {
		return externalData2;
	}

	public void setCreditClearancePeriodBefore(BerInteger creditClearancePeriodBefore) {
		this.creditClearancePeriodBefore = creditClearancePeriodBefore;
	}

	public BerInteger getCreditClearancePeriodBefore() {
		return creditClearancePeriodBefore;
	}

	public void setCreditClearancePeriodAfter(BerInteger creditClearancePeriodAfter) {
		this.creditClearancePeriodAfter = creditClearancePeriodAfter;
	}

	public BerInteger getCreditClearancePeriodAfter() {
		return creditClearancePeriodAfter;
	}

	public void setServiceFeeDateBefore(Date serviceFeeDateBefore) {
		this.serviceFeeDateBefore = serviceFeeDateBefore;
	}

	public Date getServiceFeeDateBefore() {
		return serviceFeeDateBefore;
	}

	public void setServiceFeeDateAfter(Date serviceFeeDateAfter) {
		this.serviceFeeDateAfter = serviceFeeDateAfter;
	}

	public Date getServiceFeeDateAfter() {
		return serviceFeeDateAfter;
	}

	public void setServiceFeeDaysSurplus(BerInteger serviceFeeDaysSurplus) {
		this.serviceFeeDaysSurplus = serviceFeeDaysSurplus;
	}

	public BerInteger getServiceFeeDaysSurplus() {
		return serviceFeeDaysSurplus;
	}

	public void setDedicatedAccounts(DedicatedAccounts dedicatedAccounts) {
		this.dedicatedAccounts = dedicatedAccounts;
	}

	public DedicatedAccounts getDedicatedAccounts() {
		return dedicatedAccounts;
	}

	public void setCellIdentifier(CellIdentifier cellIdentifier) {
		this.cellIdentifier = cellIdentifier;
	}

	public CellIdentifier getCellIdentifier() {
		return cellIdentifier;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (cellIdentifier != null) {
			codeLength += cellIdentifier.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 31
			os.write(0x1F);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (dedicatedAccounts != null) {
			codeLength += dedicatedAccounts.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
			os.write(0xBE);
			codeLength += 1;
		}
		
		if (serviceFeeDaysSurplus != null) {
			codeLength += serviceFeeDaysSurplus.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 29
			os.write(0x9D);
			codeLength += 1;
		}
		
		if (serviceFeeDateAfter != null) {
			codeLength += serviceFeeDateAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 28
			os.write(0x9C);
			codeLength += 1;
		}
		
		if (serviceFeeDateBefore != null) {
			codeLength += serviceFeeDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 27
			os.write(0x9B);
			codeLength += 1;
		}
		
		if (creditClearancePeriodAfter != null) {
			codeLength += creditClearancePeriodAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 26
			os.write(0x9A);
			codeLength += 1;
		}
		
		if (creditClearancePeriodBefore != null) {
			codeLength += creditClearancePeriodBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			os.write(0x99);
			codeLength += 1;
		}
		
		if (externalData2 != null) {
			codeLength += externalData2.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			os.write(0x98);
			codeLength += 1;
		}
		
		if (externalData1 != null) {
			codeLength += externalData1.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 23
			os.write(0x97);
			codeLength += 1;
		}
		
		if (accountGroupId != null) {
			codeLength += accountGroupId.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			os.write(0x96);
			codeLength += 1;
		}
		
		codeLength += accountFlagsAfter.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 21
		os.write(0x95);
		codeLength += 1;
		
		codeLength += accountFlagsBefore.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 20
		os.write(0x94);
		codeLength += 1;
		
		if (negativeBalanceBarringDate != null) {
			codeLength += negativeBalanceBarringDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			os.write(0x93);
			codeLength += 1;
		}
		
		if (accountBalance != null) {
			codeLength += accountBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			os.write(0x92);
			codeLength += 1;
		}
		
		if (subscriberNumber != null) {
			codeLength += subscriberNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			os.write(0x91);
			codeLength += 1;
		}
		
		if (adjustmentAmount != null) {
			codeLength += adjustmentAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			os.write(0x90);
			codeLength += 1;
		}
		
		if (accountCurrency != null) {
			codeLength += accountCurrency.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			os.write(0x8F);
			codeLength += 1;
		}
		
		codeLength += accountNumber.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 14
		os.write(0x8E);
		codeLength += 1;
		
		codeLength += transactionCurrency.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 13
		os.write(0x8D);
		codeLength += 1;
		
		if (transactionAmount != null) {
			codeLength += transactionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			os.write(0x8C);
			codeLength += 1;
		}
		
		if (transactionCode != null) {
			codeLength += transactionCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			os.write(0x8B);
			codeLength += 1;
		}
		
		if (transactionType != null) {
			codeLength += transactionType.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			os.write(0x8A);
			codeLength += 1;
		}
		
		codeLength += currentServiceClass.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 9
		os.write(0x89);
		codeLength += 1;
		
		codeLength += timeStamp.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		os.write(0x88);
		codeLength += 1;
		
		codeLength += localSequenceNumber.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		os.write(0x87);
		codeLength += 1;
		
		codeLength += hostName.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		os.write(0x86);
		codeLength += 1;
		
		codeLength += originTimeStamp.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		os.write(0x85);
		codeLength += 1;
		
		if (originOperatorID != null) {
			codeLength += originOperatorID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		codeLength += originTransactionID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		os.write(0x83);
		codeLength += 1;
		
		if (originFileID != null) {
			codeLength += originFileID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		codeLength += originHostName.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		os.write(0x81);
		codeLength += 1;
		
		codeLength += originNodeType.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			originNodeType = new NodeType();
			subCodeLength += originNodeType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			originHostName = new IDString();
			subCodeLength += originHostName.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			originFileID = new IDString();
			subCodeLength += originFileID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			originTransactionID = new TransactionID();
			subCodeLength += originTransactionID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			originOperatorID = new IDString();
			subCodeLength += originOperatorID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			originTimeStamp = new TimeStamp();
			subCodeLength += originTimeStamp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			hostName = new NodeID();
			subCodeLength += hostName.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			localSequenceNumber = new LocalSequenceNumber();
			subCodeLength += localSequenceNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			timeStamp = new TimeStamp();
			subCodeLength += timeStamp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			currentServiceClass = new ServiceClass();
			subCodeLength += currentServiceClass.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			transactionType = new TransactionType();
			subCodeLength += transactionType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			transactionCode = new TransactionCode();
			subCodeLength += transactionCode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			transactionAmount = new MoneyAmount();
			subCodeLength += transactionAmount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			transactionCurrency = new Currency();
			subCodeLength += transactionCurrency.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			accountNumber = new NumberString();
			subCodeLength += accountNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			accountCurrency = new Currency();
			subCodeLength += accountCurrency.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			adjustmentAmount = new MoneyAmount();
			subCodeLength += adjustmentAmount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			subscriberNumber = new NumberString();
			subCodeLength += subscriberNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			accountBalance = new MoneyAmount();
			subCodeLength += accountBalance.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			negativeBalanceBarringDate = new Date();
			subCodeLength += negativeBalanceBarringDate.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			accountFlagsBefore = new AccountFlags();
			subCodeLength += accountFlagsBefore.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			accountFlagsAfter = new AccountFlags();
			subCodeLength += accountFlagsAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
			accountGroupId = new AccountGroupId();
			subCodeLength += accountGroupId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
			externalData1 = new ExternalDataString();
			subCodeLength += externalData1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
			externalData2 = new ExternalDataString();
			subCodeLength += externalData2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
			creditClearancePeriodBefore = new BerInteger();
			subCodeLength += creditClearancePeriodBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 26)) {
			creditClearancePeriodAfter = new BerInteger();
			subCodeLength += creditClearancePeriodAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
			serviceFeeDateBefore = new Date();
			subCodeLength += serviceFeeDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 28)) {
			serviceFeeDateAfter = new Date();
			subCodeLength += serviceFeeDateAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
			serviceFeeDaysSurplus = new BerInteger();
			subCodeLength += serviceFeeDaysSurplus.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			dedicatedAccounts = new DedicatedAccounts();
			subCodeLength += dedicatedAccounts.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
			cellIdentifier = new CellIdentifier();
			subCodeLength += cellIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originNodeType != null) {
			sb.append("originNodeType: ").append(originNodeType);
		}
		else {
			sb.append("originNodeType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originHostName != null) {
			sb.append("originHostName: ").append(originHostName);
		}
		else {
			sb.append("originHostName: <empty-required-field>");
		}
		
		if (originFileID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("originFileID: ").append(originFileID);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originTransactionID != null) {
			sb.append("originTransactionID: ").append(originTransactionID);
		}
		else {
			sb.append("originTransactionID: <empty-required-field>");
		}
		
		if (originOperatorID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("originOperatorID: ").append(originOperatorID);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originTimeStamp != null) {
			sb.append("originTimeStamp: ").append(originTimeStamp);
		}
		else {
			sb.append("originTimeStamp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (hostName != null) {
			sb.append("hostName: ").append(hostName);
		}
		else {
			sb.append("hostName: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (localSequenceNumber != null) {
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
		}
		else {
			sb.append("localSequenceNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeStamp != null) {
			sb.append("timeStamp: ").append(timeStamp);
		}
		else {
			sb.append("timeStamp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (currentServiceClass != null) {
			sb.append("currentServiceClass: ").append(currentServiceClass);
		}
		else {
			sb.append("currentServiceClass: <empty-required-field>");
		}
		
		if (transactionType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionType: ").append(transactionType);
		}
		
		if (transactionCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionCode: ").append(transactionCode);
		}
		
		if (transactionAmount != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionAmount: ").append(transactionAmount);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (transactionCurrency != null) {
			sb.append("transactionCurrency: ").append(transactionCurrency);
		}
		else {
			sb.append("transactionCurrency: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountNumber != null) {
			sb.append("accountNumber: ").append(accountNumber);
		}
		else {
			sb.append("accountNumber: <empty-required-field>");
		}
		
		if (accountCurrency != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountCurrency: ").append(accountCurrency);
		}
		
		if (adjustmentAmount != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("adjustmentAmount: ").append(adjustmentAmount);
		}
		
		if (subscriberNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subscriberNumber: ").append(subscriberNumber);
		}
		
		if (accountBalance != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountBalance: ").append(accountBalance);
		}
		
		if (negativeBalanceBarringDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("negativeBalanceBarringDate: ").append(negativeBalanceBarringDate);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountFlagsBefore != null) {
			sb.append("accountFlagsBefore: ").append(accountFlagsBefore);
		}
		else {
			sb.append("accountFlagsBefore: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountFlagsAfter != null) {
			sb.append("accountFlagsAfter: ").append(accountFlagsAfter);
		}
		else {
			sb.append("accountFlagsAfter: <empty-required-field>");
		}
		
		if (accountGroupId != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountGroupId: ").append(accountGroupId);
		}
		
		if (externalData1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("externalData1: ").append(externalData1);
		}
		
		if (externalData2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("externalData2: ").append(externalData2);
		}
		
		if (creditClearancePeriodBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("creditClearancePeriodBefore: ").append(creditClearancePeriodBefore);
		}
		
		if (creditClearancePeriodAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("creditClearancePeriodAfter: ").append(creditClearancePeriodAfter);
		}
		
		if (serviceFeeDateBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceFeeDateBefore: ").append(serviceFeeDateBefore);
		}
		
		if (serviceFeeDateAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceFeeDateAfter: ").append(serviceFeeDateAfter);
		}
		
		if (serviceFeeDaysSurplus != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceFeeDaysSurplus: ").append(serviceFeeDaysSurplus);
		}
		
		if (dedicatedAccounts != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccounts: ");
			dedicatedAccounts.appendAsString(sb, indentLevel + 1);
		}
		
		if (cellIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cellIdentifier: ").append(cellIdentifier);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

