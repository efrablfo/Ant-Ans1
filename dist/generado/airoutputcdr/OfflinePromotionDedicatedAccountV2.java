/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package airoutputcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class OfflinePromotionDedicatedAccountV2 implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class SubDedicatedAccounts implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<OfflinePromotionSubDedicatedAccount> seqOf = null;

		public SubDedicatedAccounts() {
			seqOf = new ArrayList<OfflinePromotionSubDedicatedAccount>();
		}

		public SubDedicatedAccounts(byte[] code) {
			this.code = code;
		}

		public List<OfflinePromotionSubDedicatedAccount> getOfflinePromotionSubDedicatedAccount() {
			if (seqOf == null) {
				seqOf = new ArrayList<OfflinePromotionSubDedicatedAccount>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				OfflinePromotionSubDedicatedAccount element = new OfflinePromotionSubDedicatedAccount();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<OfflinePromotionSubDedicatedAccount> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private DedicatedAccountID dedicatedAccountID = null;
	private CampaignIdentifier campaignIdentifier = null;
	private MoneyAmount promotionDivisionAmount = null;
	private MoneyAmount accountBalance = null;
	private Date accountExpiryDate = null;
	private MoneyAmount accountBalanceBefore = null;
	private Date accountExpiryDateBefore = null;
	private Date accountStartDate = null;
	private Date accountStartDateBefore = null;
	private BerInteger offerIdentifier = null;
	private SubDedicatedAccounts subDedicatedAccounts = null;
	private UnitType dedicatedAccountUnit = null;
	private Units promotionDivisionUnits = null;
	private Units unitBalance = null;
	private Units unitBalanceBefore = null;
	
	public OfflinePromotionDedicatedAccountV2() {
	}

	public OfflinePromotionDedicatedAccountV2(byte[] code) {
		this.code = code;
	}

	public void setDedicatedAccountID(DedicatedAccountID dedicatedAccountID) {
		this.dedicatedAccountID = dedicatedAccountID;
	}

	public DedicatedAccountID getDedicatedAccountID() {
		return dedicatedAccountID;
	}

	public void setCampaignIdentifier(CampaignIdentifier campaignIdentifier) {
		this.campaignIdentifier = campaignIdentifier;
	}

	public CampaignIdentifier getCampaignIdentifier() {
		return campaignIdentifier;
	}

	public void setPromotionDivisionAmount(MoneyAmount promotionDivisionAmount) {
		this.promotionDivisionAmount = promotionDivisionAmount;
	}

	public MoneyAmount getPromotionDivisionAmount() {
		return promotionDivisionAmount;
	}

	public void setAccountBalance(MoneyAmount accountBalance) {
		this.accountBalance = accountBalance;
	}

	public MoneyAmount getAccountBalance() {
		return accountBalance;
	}

	public void setAccountExpiryDate(Date accountExpiryDate) {
		this.accountExpiryDate = accountExpiryDate;
	}

	public Date getAccountExpiryDate() {
		return accountExpiryDate;
	}

	public void setAccountBalanceBefore(MoneyAmount accountBalanceBefore) {
		this.accountBalanceBefore = accountBalanceBefore;
	}

	public MoneyAmount getAccountBalanceBefore() {
		return accountBalanceBefore;
	}

	public void setAccountExpiryDateBefore(Date accountExpiryDateBefore) {
		this.accountExpiryDateBefore = accountExpiryDateBefore;
	}

	public Date getAccountExpiryDateBefore() {
		return accountExpiryDateBefore;
	}

	public void setAccountStartDate(Date accountStartDate) {
		this.accountStartDate = accountStartDate;
	}

	public Date getAccountStartDate() {
		return accountStartDate;
	}

	public void setAccountStartDateBefore(Date accountStartDateBefore) {
		this.accountStartDateBefore = accountStartDateBefore;
	}

	public Date getAccountStartDateBefore() {
		return accountStartDateBefore;
	}

	public void setOfferIdentifier(BerInteger offerIdentifier) {
		this.offerIdentifier = offerIdentifier;
	}

	public BerInteger getOfferIdentifier() {
		return offerIdentifier;
	}

	public void setSubDedicatedAccounts(SubDedicatedAccounts subDedicatedAccounts) {
		this.subDedicatedAccounts = subDedicatedAccounts;
	}

	public SubDedicatedAccounts getSubDedicatedAccounts() {
		return subDedicatedAccounts;
	}

	public void setDedicatedAccountUnit(UnitType dedicatedAccountUnit) {
		this.dedicatedAccountUnit = dedicatedAccountUnit;
	}

	public UnitType getDedicatedAccountUnit() {
		return dedicatedAccountUnit;
	}

	public void setPromotionDivisionUnits(Units promotionDivisionUnits) {
		this.promotionDivisionUnits = promotionDivisionUnits;
	}

	public Units getPromotionDivisionUnits() {
		return promotionDivisionUnits;
	}

	public void setUnitBalance(Units unitBalance) {
		this.unitBalance = unitBalance;
	}

	public Units getUnitBalance() {
		return unitBalance;
	}

	public void setUnitBalanceBefore(Units unitBalanceBefore) {
		this.unitBalanceBefore = unitBalanceBefore;
	}

	public Units getUnitBalanceBefore() {
		return unitBalanceBefore;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (unitBalanceBefore != null) {
			codeLength += unitBalanceBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			os.write(0x8E);
			codeLength += 1;
		}
		
		if (unitBalance != null) {
			codeLength += unitBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			os.write(0x8D);
			codeLength += 1;
		}
		
		if (promotionDivisionUnits != null) {
			codeLength += promotionDivisionUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			os.write(0x8C);
			codeLength += 1;
		}
		
		if (dedicatedAccountUnit != null) {
			codeLength += dedicatedAccountUnit.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			os.write(0x8B);
			codeLength += 1;
		}
		
		if (subDedicatedAccounts != null) {
			codeLength += subDedicatedAccounts.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			os.write(0xAA);
			codeLength += 1;
		}
		
		if (offerIdentifier != null) {
			codeLength += offerIdentifier.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			os.write(0x89);
			codeLength += 1;
		}
		
		if (accountStartDateBefore != null) {
			codeLength += accountStartDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (accountStartDate != null) {
			codeLength += accountStartDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (accountExpiryDateBefore != null) {
			codeLength += accountExpiryDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (accountBalanceBefore != null) {
			codeLength += accountBalanceBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (accountExpiryDate != null) {
			codeLength += accountExpiryDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (accountBalance != null) {
			codeLength += accountBalance.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
		}
		
		if (promotionDivisionAmount != null) {
			codeLength += promotionDivisionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		if (campaignIdentifier != null) {
			codeLength += campaignIdentifier.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		codeLength += dedicatedAccountID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			dedicatedAccountID = new DedicatedAccountID();
			subCodeLength += dedicatedAccountID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			campaignIdentifier = new CampaignIdentifier();
			subCodeLength += campaignIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			promotionDivisionAmount = new MoneyAmount();
			subCodeLength += promotionDivisionAmount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			accountBalance = new MoneyAmount();
			subCodeLength += accountBalance.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			accountExpiryDate = new Date();
			subCodeLength += accountExpiryDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			accountBalanceBefore = new MoneyAmount();
			subCodeLength += accountBalanceBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			accountExpiryDateBefore = new Date();
			subCodeLength += accountExpiryDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			accountStartDate = new Date();
			subCodeLength += accountStartDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			accountStartDateBefore = new Date();
			subCodeLength += accountStartDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			offerIdentifier = new BerInteger();
			subCodeLength += offerIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			subDedicatedAccounts = new SubDedicatedAccounts();
			subCodeLength += subDedicatedAccounts.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			dedicatedAccountUnit = new UnitType();
			subCodeLength += dedicatedAccountUnit.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			promotionDivisionUnits = new Units();
			subCodeLength += promotionDivisionUnits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			unitBalance = new Units();
			subCodeLength += unitBalance.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			unitBalanceBefore = new Units();
			subCodeLength += unitBalanceBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dedicatedAccountID != null) {
			sb.append("dedicatedAccountID: ").append(dedicatedAccountID);
		}
		else {
			sb.append("dedicatedAccountID: <empty-required-field>");
		}
		
		if (campaignIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("campaignIdentifier: ").append(campaignIdentifier);
		}
		
		if (promotionDivisionAmount != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionDivisionAmount: ").append(promotionDivisionAmount);
		}
		
		if (accountBalance != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountBalance: ").append(accountBalance);
		}
		
		if (accountExpiryDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountExpiryDate: ").append(accountExpiryDate);
		}
		
		if (accountBalanceBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountBalanceBefore: ").append(accountBalanceBefore);
		}
		
		if (accountExpiryDateBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountExpiryDateBefore: ").append(accountExpiryDateBefore);
		}
		
		if (accountStartDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountStartDate: ").append(accountStartDate);
		}
		
		if (accountStartDateBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountStartDateBefore: ").append(accountStartDateBefore);
		}
		
		if (offerIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offerIdentifier: ").append(offerIdentifier);
		}
		
		if (subDedicatedAccounts != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subDedicatedAccounts: ");
			subDedicatedAccounts.appendAsString(sb, indentLevel + 1);
		}
		
		if (dedicatedAccountUnit != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountUnit: ").append(dedicatedAccountUnit);
		}
		
		if (promotionDivisionUnits != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionDivisionUnits: ").append(promotionDivisionUnits);
		}
		
		if (unitBalance != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("unitBalance: ").append(unitBalance);
		}
		
		if (unitBalanceBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("unitBalanceBefore: ").append(unitBalanceBefore);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

