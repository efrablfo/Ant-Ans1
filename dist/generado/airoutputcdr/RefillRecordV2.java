/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package airoutputcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class RefillRecordV2 implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class SelectionTreeParameter implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<airoutputcdr.SelectionTreeParameter> seqOf = null;

		public SelectionTreeParameter() {
			seqOf = new ArrayList<airoutputcdr.SelectionTreeParameter>();
		}

		public SelectionTreeParameter(byte[] code) {
			this.code = code;
		}

		public List<airoutputcdr.SelectionTreeParameter> getSelectionTreeParameter() {
			if (seqOf == null) {
				seqOf = new ArrayList<airoutputcdr.SelectionTreeParameter>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				airoutputcdr.SelectionTreeParameter element = new airoutputcdr.SelectionTreeParameter();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<airoutputcdr.SelectionTreeParameter> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TreeDefinedFields implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TreeDefinedField> seqOf = null;

		public TreeDefinedFields() {
			seqOf = new ArrayList<TreeDefinedField>();
		}

		public TreeDefinedFields(byte[] code) {
			this.code = code;
		}

		public List<TreeDefinedField> getTreeDefinedField() {
			if (seqOf == null) {
				seqOf = new ArrayList<TreeDefinedField>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TreeDefinedField element = new TreeDefinedField();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TreeDefinedField> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private NodeType originNodeType = null;
	private IDString originHostName = null;
	private IDString originFileID = null;
	private TransactionID originTransactionID = null;
	private IDString originOperatorID = null;
	private TimeStamp originTimeStamp = null;
	private NodeID hostName = null;
	private LocalSequenceNumber localSequenceNumber = null;
	private TimeStamp timeStamp = null;
	private ServiceClass currentServiceClass = null;
	private BerBoolean voucherBasedRefill = null;
	private TransactionType transactionType = null;
	private TransactionCode transactionCode = null;
	private MoneyAmount transactionAmount = null;
	private Currency transactionCurrency = null;
	private MoneyAmount refillAmountConverted = null;
	private MoneyAmount refillDivisionAmount = null;
	private RefillTypeV2 refillType = null;
	private RefillProfileID refillProfileID = null;
	private SegmentationID segmentationID = null;
	private VoucherString voucherSerialNumber = null;
	private VoucherGroupID voucherGroupID = null;
	private NumberString accountNumber = null;
	private Currency accountCurrency = null;
	private NumberString subscriberNumber = null;
	private PromotionAnnouncementCode promotionAnnouncementCode = null;
	private AccountInformation accountInformationBeforeRefill = null;
	private AccountInformation accountInformationAfterRefill = null;
	private MoneyAmount refillPromoDivisionAmount = null;
	private BerInteger supervisionDaysPromoPart = null;
	private BerInteger supervisionDaysSurplus = null;
	private BerInteger serviceFeeDaysPromoPart = null;
	private BerInteger serviceFeeDaysSurplus = null;
	private BerInteger maximumServiceFeePeriod = null;
	private BerInteger maximumSupervisionPeriod = null;
	private Date activationDate = null;
	private BerBoolean welcomeStatus = null;
	private Agent voucherAgent = null;
	private Date promotionPlanAllocStartDate = null;
	private AccountGroupId accountGroupId = null;
	private ExternalDataString externalData1 = null;
	private ExternalDataString externalData2 = null;
	private ExternalDataString externalData3 = null;
	private ExternalDataString externalData4 = null;
	private LocationNumber locationNumber = null;
	private VoucherString voucherActivationCode = null;
	private Currency accountCurrencyCleared = null;
	private BerBoolean ignoreServiceClassHierarchy = null;
	private SelectionTreeParameter selectionTreeParameter = null;
	private TreeDefinedFields treeDefinedFields = null;
	private RegionType accountHomeRegion = null;
	private RegionType subscriberRegion = null;
	private RegionType voucherRegion = null;
	private Date promotionPlanAllocEndDate = null;
	private RefillTypeV2 requestedRefillType = null;
	private CellIdentifier cellIdentifier = null;
	
	public RefillRecordV2() {
	}

	public RefillRecordV2(byte[] code) {
		this.code = code;
	}

	public void setOriginNodeType(NodeType originNodeType) {
		this.originNodeType = originNodeType;
	}

	public NodeType getOriginNodeType() {
		return originNodeType;
	}

	public void setOriginHostName(IDString originHostName) {
		this.originHostName = originHostName;
	}

	public IDString getOriginHostName() {
		return originHostName;
	}

	public void setOriginFileID(IDString originFileID) {
		this.originFileID = originFileID;
	}

	public IDString getOriginFileID() {
		return originFileID;
	}

	public void setOriginTransactionID(TransactionID originTransactionID) {
		this.originTransactionID = originTransactionID;
	}

	public TransactionID getOriginTransactionID() {
		return originTransactionID;
	}

	public void setOriginOperatorID(IDString originOperatorID) {
		this.originOperatorID = originOperatorID;
	}

	public IDString getOriginOperatorID() {
		return originOperatorID;
	}

	public void setOriginTimeStamp(TimeStamp originTimeStamp) {
		this.originTimeStamp = originTimeStamp;
	}

	public TimeStamp getOriginTimeStamp() {
		return originTimeStamp;
	}

	public void setHostName(NodeID hostName) {
		this.hostName = hostName;
	}

	public NodeID getHostName() {
		return hostName;
	}

	public void setLocalSequenceNumber(LocalSequenceNumber localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public LocalSequenceNumber getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setTimeStamp(TimeStamp timeStamp) {
		this.timeStamp = timeStamp;
	}

	public TimeStamp getTimeStamp() {
		return timeStamp;
	}

	public void setCurrentServiceClass(ServiceClass currentServiceClass) {
		this.currentServiceClass = currentServiceClass;
	}

	public ServiceClass getCurrentServiceClass() {
		return currentServiceClass;
	}

	public void setVoucherBasedRefill(BerBoolean voucherBasedRefill) {
		this.voucherBasedRefill = voucherBasedRefill;
	}

	public BerBoolean getVoucherBasedRefill() {
		return voucherBasedRefill;
	}

	public void setTransactionType(TransactionType transactionType) {
		this.transactionType = transactionType;
	}

	public TransactionType getTransactionType() {
		return transactionType;
	}

	public void setTransactionCode(TransactionCode transactionCode) {
		this.transactionCode = transactionCode;
	}

	public TransactionCode getTransactionCode() {
		return transactionCode;
	}

	public void setTransactionAmount(MoneyAmount transactionAmount) {
		this.transactionAmount = transactionAmount;
	}

	public MoneyAmount getTransactionAmount() {
		return transactionAmount;
	}

	public void setTransactionCurrency(Currency transactionCurrency) {
		this.transactionCurrency = transactionCurrency;
	}

	public Currency getTransactionCurrency() {
		return transactionCurrency;
	}

	public void setRefillAmountConverted(MoneyAmount refillAmountConverted) {
		this.refillAmountConverted = refillAmountConverted;
	}

	public MoneyAmount getRefillAmountConverted() {
		return refillAmountConverted;
	}

	public void setRefillDivisionAmount(MoneyAmount refillDivisionAmount) {
		this.refillDivisionAmount = refillDivisionAmount;
	}

	public MoneyAmount getRefillDivisionAmount() {
		return refillDivisionAmount;
	}

	public void setRefillType(RefillTypeV2 refillType) {
		this.refillType = refillType;
	}

	public RefillTypeV2 getRefillType() {
		return refillType;
	}

	public void setRefillProfileID(RefillProfileID refillProfileID) {
		this.refillProfileID = refillProfileID;
	}

	public RefillProfileID getRefillProfileID() {
		return refillProfileID;
	}

	public void setSegmentationID(SegmentationID segmentationID) {
		this.segmentationID = segmentationID;
	}

	public SegmentationID getSegmentationID() {
		return segmentationID;
	}

	public void setVoucherSerialNumber(VoucherString voucherSerialNumber) {
		this.voucherSerialNumber = voucherSerialNumber;
	}

	public VoucherString getVoucherSerialNumber() {
		return voucherSerialNumber;
	}

	public void setVoucherGroupID(VoucherGroupID voucherGroupID) {
		this.voucherGroupID = voucherGroupID;
	}

	public VoucherGroupID getVoucherGroupID() {
		return voucherGroupID;
	}

	public void setAccountNumber(NumberString accountNumber) {
		this.accountNumber = accountNumber;
	}

	public NumberString getAccountNumber() {
		return accountNumber;
	}

	public void setAccountCurrency(Currency accountCurrency) {
		this.accountCurrency = accountCurrency;
	}

	public Currency getAccountCurrency() {
		return accountCurrency;
	}

	public void setSubscriberNumber(NumberString subscriberNumber) {
		this.subscriberNumber = subscriberNumber;
	}

	public NumberString getSubscriberNumber() {
		return subscriberNumber;
	}

	public void setPromotionAnnouncementCode(PromotionAnnouncementCode promotionAnnouncementCode) {
		this.promotionAnnouncementCode = promotionAnnouncementCode;
	}

	public PromotionAnnouncementCode getPromotionAnnouncementCode() {
		return promotionAnnouncementCode;
	}

	public void setAccountInformationBeforeRefill(AccountInformation accountInformationBeforeRefill) {
		this.accountInformationBeforeRefill = accountInformationBeforeRefill;
	}

	public AccountInformation getAccountInformationBeforeRefill() {
		return accountInformationBeforeRefill;
	}

	public void setAccountInformationAfterRefill(AccountInformation accountInformationAfterRefill) {
		this.accountInformationAfterRefill = accountInformationAfterRefill;
	}

	public AccountInformation getAccountInformationAfterRefill() {
		return accountInformationAfterRefill;
	}

	public void setRefillPromoDivisionAmount(MoneyAmount refillPromoDivisionAmount) {
		this.refillPromoDivisionAmount = refillPromoDivisionAmount;
	}

	public MoneyAmount getRefillPromoDivisionAmount() {
		return refillPromoDivisionAmount;
	}

	public void setSupervisionDaysPromoPart(BerInteger supervisionDaysPromoPart) {
		this.supervisionDaysPromoPart = supervisionDaysPromoPart;
	}

	public BerInteger getSupervisionDaysPromoPart() {
		return supervisionDaysPromoPart;
	}

	public void setSupervisionDaysSurplus(BerInteger supervisionDaysSurplus) {
		this.supervisionDaysSurplus = supervisionDaysSurplus;
	}

	public BerInteger getSupervisionDaysSurplus() {
		return supervisionDaysSurplus;
	}

	public void setServiceFeeDaysPromoPart(BerInteger serviceFeeDaysPromoPart) {
		this.serviceFeeDaysPromoPart = serviceFeeDaysPromoPart;
	}

	public BerInteger getServiceFeeDaysPromoPart() {
		return serviceFeeDaysPromoPart;
	}

	public void setServiceFeeDaysSurplus(BerInteger serviceFeeDaysSurplus) {
		this.serviceFeeDaysSurplus = serviceFeeDaysSurplus;
	}

	public BerInteger getServiceFeeDaysSurplus() {
		return serviceFeeDaysSurplus;
	}

	public void setMaximumServiceFeePeriod(BerInteger maximumServiceFeePeriod) {
		this.maximumServiceFeePeriod = maximumServiceFeePeriod;
	}

	public BerInteger getMaximumServiceFeePeriod() {
		return maximumServiceFeePeriod;
	}

	public void setMaximumSupervisionPeriod(BerInteger maximumSupervisionPeriod) {
		this.maximumSupervisionPeriod = maximumSupervisionPeriod;
	}

	public BerInteger getMaximumSupervisionPeriod() {
		return maximumSupervisionPeriod;
	}

	public void setActivationDate(Date activationDate) {
		this.activationDate = activationDate;
	}

	public Date getActivationDate() {
		return activationDate;
	}

	public void setWelcomeStatus(BerBoolean welcomeStatus) {
		this.welcomeStatus = welcomeStatus;
	}

	public BerBoolean getWelcomeStatus() {
		return welcomeStatus;
	}

	public void setVoucherAgent(Agent voucherAgent) {
		this.voucherAgent = voucherAgent;
	}

	public Agent getVoucherAgent() {
		return voucherAgent;
	}

	public void setPromotionPlanAllocStartDate(Date promotionPlanAllocStartDate) {
		this.promotionPlanAllocStartDate = promotionPlanAllocStartDate;
	}

	public Date getPromotionPlanAllocStartDate() {
		return promotionPlanAllocStartDate;
	}

	public void setAccountGroupId(AccountGroupId accountGroupId) {
		this.accountGroupId = accountGroupId;
	}

	public AccountGroupId getAccountGroupId() {
		return accountGroupId;
	}

	public void setExternalData1(ExternalDataString externalData1) {
		this.externalData1 = externalData1;
	}

	public ExternalDataString getExternalData1() {
		return externalData1;
	}

	public void setExternalData2(ExternalDataString externalData2) {
		this.externalData2 = externalData2;
	}

	public ExternalDataString getExternalData2() {
		return externalData2;
	}

	public void setExternalData3(ExternalDataString externalData3) {
		this.externalData3 = externalData3;
	}

	public ExternalDataString getExternalData3() {
		return externalData3;
	}

	public void setExternalData4(ExternalDataString externalData4) {
		this.externalData4 = externalData4;
	}

	public ExternalDataString getExternalData4() {
		return externalData4;
	}

	public void setLocationNumber(LocationNumber locationNumber) {
		this.locationNumber = locationNumber;
	}

	public LocationNumber getLocationNumber() {
		return locationNumber;
	}

	public void setVoucherActivationCode(VoucherString voucherActivationCode) {
		this.voucherActivationCode = voucherActivationCode;
	}

	public VoucherString getVoucherActivationCode() {
		return voucherActivationCode;
	}

	public void setAccountCurrencyCleared(Currency accountCurrencyCleared) {
		this.accountCurrencyCleared = accountCurrencyCleared;
	}

	public Currency getAccountCurrencyCleared() {
		return accountCurrencyCleared;
	}

	public void setIgnoreServiceClassHierarchy(BerBoolean ignoreServiceClassHierarchy) {
		this.ignoreServiceClassHierarchy = ignoreServiceClassHierarchy;
	}

	public BerBoolean getIgnoreServiceClassHierarchy() {
		return ignoreServiceClassHierarchy;
	}

	public void setSelectionTreeParameter(SelectionTreeParameter selectionTreeParameter) {
		this.selectionTreeParameter = selectionTreeParameter;
	}

	public SelectionTreeParameter getSelectionTreeParameter() {
		return selectionTreeParameter;
	}

	public void setTreeDefinedFields(TreeDefinedFields treeDefinedFields) {
		this.treeDefinedFields = treeDefinedFields;
	}

	public TreeDefinedFields getTreeDefinedFields() {
		return treeDefinedFields;
	}

	public void setAccountHomeRegion(RegionType accountHomeRegion) {
		this.accountHomeRegion = accountHomeRegion;
	}

	public RegionType getAccountHomeRegion() {
		return accountHomeRegion;
	}

	public void setSubscriberRegion(RegionType subscriberRegion) {
		this.subscriberRegion = subscriberRegion;
	}

	public RegionType getSubscriberRegion() {
		return subscriberRegion;
	}

	public void setVoucherRegion(RegionType voucherRegion) {
		this.voucherRegion = voucherRegion;
	}

	public RegionType getVoucherRegion() {
		return voucherRegion;
	}

	public void setPromotionPlanAllocEndDate(Date promotionPlanAllocEndDate) {
		this.promotionPlanAllocEndDate = promotionPlanAllocEndDate;
	}

	public Date getPromotionPlanAllocEndDate() {
		return promotionPlanAllocEndDate;
	}

	public void setRequestedRefillType(RefillTypeV2 requestedRefillType) {
		this.requestedRefillType = requestedRefillType;
	}

	public RefillTypeV2 getRequestedRefillType() {
		return requestedRefillType;
	}

	public void setCellIdentifier(CellIdentifier cellIdentifier) {
		this.cellIdentifier = cellIdentifier;
	}

	public CellIdentifier getCellIdentifier() {
		return cellIdentifier;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (cellIdentifier != null) {
			codeLength += cellIdentifier.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 55
			os.write(0x37);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (requestedRefillType != null) {
			codeLength += requestedRefillType.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 54
			os.write(0x36);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (promotionPlanAllocEndDate != null) {
			codeLength += promotionPlanAllocEndDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 53
			os.write(0x35);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (voucherRegion != null) {
			codeLength += voucherRegion.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 52
			os.write(0x34);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (subscriberRegion != null) {
			codeLength += subscriberRegion.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 51
			os.write(0x33);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (accountHomeRegion != null) {
			codeLength += accountHomeRegion.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 50
			os.write(0x32);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (treeDefinedFields != null) {
			codeLength += treeDefinedFields.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 49
			os.write(0x31);
			os.write(0xBF);
			codeLength += 2;
		}
		
		codeLength += selectionTreeParameter.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 48
		os.write(0x30);
		os.write(0xBF);
		codeLength += 2;
		
		if (ignoreServiceClassHierarchy != null) {
			codeLength += ignoreServiceClassHierarchy.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 47
			os.write(0x2F);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (accountCurrencyCleared != null) {
			codeLength += accountCurrencyCleared.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 46
			os.write(0x2E);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (voucherActivationCode != null) {
			codeLength += voucherActivationCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 45
			os.write(0x2D);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (locationNumber != null) {
			codeLength += locationNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 44
			os.write(0x2C);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (externalData4 != null) {
			codeLength += externalData4.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 43
			os.write(0x2B);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (externalData3 != null) {
			codeLength += externalData3.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 42
			os.write(0x2A);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (externalData2 != null) {
			codeLength += externalData2.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 41
			os.write(0x29);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (externalData1 != null) {
			codeLength += externalData1.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 40
			os.write(0x28);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (accountGroupId != null) {
			codeLength += accountGroupId.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 39
			os.write(0x27);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (promotionPlanAllocStartDate != null) {
			codeLength += promotionPlanAllocStartDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 38
			os.write(0x26);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (voucherAgent != null) {
			codeLength += voucherAgent.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 37
			os.write(0x25);
			os.write(0x9F);
			codeLength += 2;
		}
		
		codeLength += welcomeStatus.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 36
		os.write(0x24);
		os.write(0x9F);
		codeLength += 2;
		
		if (activationDate != null) {
			codeLength += activationDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 35
			os.write(0x23);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (maximumSupervisionPeriod != null) {
			codeLength += maximumSupervisionPeriod.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 34
			os.write(0x22);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (maximumServiceFeePeriod != null) {
			codeLength += maximumServiceFeePeriod.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 33
			os.write(0x21);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (serviceFeeDaysSurplus != null) {
			codeLength += serviceFeeDaysSurplus.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 32
			os.write(0x20);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (serviceFeeDaysPromoPart != null) {
			codeLength += serviceFeeDaysPromoPart.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 31
			os.write(0x1F);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (supervisionDaysSurplus != null) {
			codeLength += supervisionDaysSurplus.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 30
			os.write(0x9E);
			codeLength += 1;
		}
		
		if (supervisionDaysPromoPart != null) {
			codeLength += supervisionDaysPromoPart.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 29
			os.write(0x9D);
			codeLength += 1;
		}
		
		if (refillPromoDivisionAmount != null) {
			codeLength += refillPromoDivisionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 28
			os.write(0x9C);
			codeLength += 1;
		}
		
		codeLength += accountInformationAfterRefill.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
		os.write(0xBB);
		codeLength += 1;
		
		codeLength += accountInformationBeforeRefill.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
		os.write(0xBA);
		codeLength += 1;
		
		if (promotionAnnouncementCode != null) {
			codeLength += promotionAnnouncementCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			os.write(0x99);
			codeLength += 1;
		}
		
		if (subscriberNumber != null) {
			codeLength += subscriberNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			os.write(0x98);
			codeLength += 1;
		}
		
		if (accountCurrency != null) {
			codeLength += accountCurrency.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 23
			os.write(0x97);
			codeLength += 1;
		}
		
		codeLength += accountNumber.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 22
		os.write(0x96);
		codeLength += 1;
		
		if (voucherGroupID != null) {
			codeLength += voucherGroupID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			os.write(0x95);
			codeLength += 1;
		}
		
		if (voucherSerialNumber != null) {
			codeLength += voucherSerialNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			os.write(0x94);
			codeLength += 1;
		}
		
		if (segmentationID != null) {
			codeLength += segmentationID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			os.write(0x93);
			codeLength += 1;
		}
		
		if (refillProfileID != null) {
			codeLength += refillProfileID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			os.write(0x92);
			codeLength += 1;
		}
		
		codeLength += refillType.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 17
		os.write(0x91);
		codeLength += 1;
		
		if (refillDivisionAmount != null) {
			codeLength += refillDivisionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			os.write(0x90);
			codeLength += 1;
		}
		
		if (refillAmountConverted != null) {
			codeLength += refillAmountConverted.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			os.write(0x8F);
			codeLength += 1;
		}
		
		if (transactionCurrency != null) {
			codeLength += transactionCurrency.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			os.write(0x8E);
			codeLength += 1;
		}
		
		if (transactionAmount != null) {
			codeLength += transactionAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			os.write(0x8D);
			codeLength += 1;
		}
		
		if (transactionCode != null) {
			codeLength += transactionCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			os.write(0x8C);
			codeLength += 1;
		}
		
		if (transactionType != null) {
			codeLength += transactionType.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			os.write(0x8B);
			codeLength += 1;
		}
		
		codeLength += voucherBasedRefill.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 10
		os.write(0x8A);
		codeLength += 1;
		
		codeLength += currentServiceClass.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 9
		os.write(0x89);
		codeLength += 1;
		
		codeLength += timeStamp.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		os.write(0x88);
		codeLength += 1;
		
		codeLength += localSequenceNumber.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		os.write(0x87);
		codeLength += 1;
		
		codeLength += hostName.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		os.write(0x86);
		codeLength += 1;
		
		codeLength += originTimeStamp.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		os.write(0x85);
		codeLength += 1;
		
		if (originOperatorID != null) {
			codeLength += originOperatorID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		codeLength += originTransactionID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		os.write(0x83);
		codeLength += 1;
		
		if (originFileID != null) {
			codeLength += originFileID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		codeLength += originHostName.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		os.write(0x81);
		codeLength += 1;
		
		codeLength += originNodeType.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			originNodeType = new NodeType();
			subCodeLength += originNodeType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			originHostName = new IDString();
			subCodeLength += originHostName.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			originFileID = new IDString();
			subCodeLength += originFileID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			originTransactionID = new TransactionID();
			subCodeLength += originTransactionID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			originOperatorID = new IDString();
			subCodeLength += originOperatorID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			originTimeStamp = new TimeStamp();
			subCodeLength += originTimeStamp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			hostName = new NodeID();
			subCodeLength += hostName.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			localSequenceNumber = new LocalSequenceNumber();
			subCodeLength += localSequenceNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			timeStamp = new TimeStamp();
			subCodeLength += timeStamp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			currentServiceClass = new ServiceClass();
			subCodeLength += currentServiceClass.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			voucherBasedRefill = new BerBoolean();
			subCodeLength += voucherBasedRefill.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			transactionType = new TransactionType();
			subCodeLength += transactionType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			transactionCode = new TransactionCode();
			subCodeLength += transactionCode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			transactionAmount = new MoneyAmount();
			subCodeLength += transactionAmount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			transactionCurrency = new Currency();
			subCodeLength += transactionCurrency.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			refillAmountConverted = new MoneyAmount();
			subCodeLength += refillAmountConverted.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			refillDivisionAmount = new MoneyAmount();
			subCodeLength += refillDivisionAmount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			refillType = new RefillTypeV2();
			subCodeLength += refillType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			refillProfileID = new RefillProfileID();
			subCodeLength += refillProfileID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			segmentationID = new SegmentationID();
			subCodeLength += segmentationID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			voucherSerialNumber = new VoucherString();
			subCodeLength += voucherSerialNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			voucherGroupID = new VoucherGroupID();
			subCodeLength += voucherGroupID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
			accountNumber = new NumberString();
			subCodeLength += accountNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
			accountCurrency = new Currency();
			subCodeLength += accountCurrency.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
			subscriberNumber = new NumberString();
			subCodeLength += subscriberNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
			promotionAnnouncementCode = new PromotionAnnouncementCode();
			subCodeLength += promotionAnnouncementCode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			accountInformationBeforeRefill = new AccountInformation();
			subCodeLength += accountInformationBeforeRefill.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			accountInformationAfterRefill = new AccountInformation();
			subCodeLength += accountInformationAfterRefill.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 28)) {
			refillPromoDivisionAmount = new MoneyAmount();
			subCodeLength += refillPromoDivisionAmount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
			supervisionDaysPromoPart = new BerInteger();
			subCodeLength += supervisionDaysPromoPart.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
			supervisionDaysSurplus = new BerInteger();
			subCodeLength += supervisionDaysSurplus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
			serviceFeeDaysPromoPart = new BerInteger();
			subCodeLength += serviceFeeDaysPromoPart.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 32)) {
			serviceFeeDaysSurplus = new BerInteger();
			subCodeLength += serviceFeeDaysSurplus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 33)) {
			maximumServiceFeePeriod = new BerInteger();
			subCodeLength += maximumServiceFeePeriod.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 34)) {
			maximumSupervisionPeriod = new BerInteger();
			subCodeLength += maximumSupervisionPeriod.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 35)) {
			activationDate = new Date();
			subCodeLength += activationDate.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 36)) {
			welcomeStatus = new BerBoolean();
			subCodeLength += welcomeStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 37)) {
			voucherAgent = new Agent();
			subCodeLength += voucherAgent.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 38)) {
			promotionPlanAllocStartDate = new Date();
			subCodeLength += promotionPlanAllocStartDate.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 39)) {
			accountGroupId = new AccountGroupId();
			subCodeLength += accountGroupId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 40)) {
			externalData1 = new ExternalDataString();
			subCodeLength += externalData1.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 41)) {
			externalData2 = new ExternalDataString();
			subCodeLength += externalData2.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 42)) {
			externalData3 = new ExternalDataString();
			subCodeLength += externalData3.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 43)) {
			externalData4 = new ExternalDataString();
			subCodeLength += externalData4.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 44)) {
			locationNumber = new LocationNumber();
			subCodeLength += locationNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 45)) {
			voucherActivationCode = new VoucherString();
			subCodeLength += voucherActivationCode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 46)) {
			accountCurrencyCleared = new Currency();
			subCodeLength += accountCurrencyCleared.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 47)) {
			ignoreServiceClassHierarchy = new BerBoolean();
			subCodeLength += ignoreServiceClassHierarchy.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 48)) {
			selectionTreeParameter = new SelectionTreeParameter();
			subCodeLength += selectionTreeParameter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 49)) {
			treeDefinedFields = new TreeDefinedFields();
			subCodeLength += treeDefinedFields.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 50)) {
			accountHomeRegion = new RegionType();
			subCodeLength += accountHomeRegion.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 51)) {
			subscriberRegion = new RegionType();
			subCodeLength += subscriberRegion.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 52)) {
			voucherRegion = new RegionType();
			subCodeLength += voucherRegion.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 53)) {
			promotionPlanAllocEndDate = new Date();
			subCodeLength += promotionPlanAllocEndDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 54)) {
			requestedRefillType = new RefillTypeV2();
			subCodeLength += requestedRefillType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 55)) {
			cellIdentifier = new CellIdentifier();
			subCodeLength += cellIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originNodeType != null) {
			sb.append("originNodeType: ").append(originNodeType);
		}
		else {
			sb.append("originNodeType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originHostName != null) {
			sb.append("originHostName: ").append(originHostName);
		}
		else {
			sb.append("originHostName: <empty-required-field>");
		}
		
		if (originFileID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("originFileID: ").append(originFileID);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originTransactionID != null) {
			sb.append("originTransactionID: ").append(originTransactionID);
		}
		else {
			sb.append("originTransactionID: <empty-required-field>");
		}
		
		if (originOperatorID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("originOperatorID: ").append(originOperatorID);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (originTimeStamp != null) {
			sb.append("originTimeStamp: ").append(originTimeStamp);
		}
		else {
			sb.append("originTimeStamp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (hostName != null) {
			sb.append("hostName: ").append(hostName);
		}
		else {
			sb.append("hostName: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (localSequenceNumber != null) {
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
		}
		else {
			sb.append("localSequenceNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeStamp != null) {
			sb.append("timeStamp: ").append(timeStamp);
		}
		else {
			sb.append("timeStamp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (currentServiceClass != null) {
			sb.append("currentServiceClass: ").append(currentServiceClass);
		}
		else {
			sb.append("currentServiceClass: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (voucherBasedRefill != null) {
			sb.append("voucherBasedRefill: ").append(voucherBasedRefill);
		}
		else {
			sb.append("voucherBasedRefill: <empty-required-field>");
		}
		
		if (transactionType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionType: ").append(transactionType);
		}
		
		if (transactionCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionCode: ").append(transactionCode);
		}
		
		if (transactionAmount != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionAmount: ").append(transactionAmount);
		}
		
		if (transactionCurrency != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transactionCurrency: ").append(transactionCurrency);
		}
		
		if (refillAmountConverted != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillAmountConverted: ").append(refillAmountConverted);
		}
		
		if (refillDivisionAmount != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillDivisionAmount: ").append(refillDivisionAmount);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (refillType != null) {
			sb.append("refillType: ").append(refillType);
		}
		else {
			sb.append("refillType: <empty-required-field>");
		}
		
		if (refillProfileID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillProfileID: ").append(refillProfileID);
		}
		
		if (segmentationID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("segmentationID: ").append(segmentationID);
		}
		
		if (voucherSerialNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("voucherSerialNumber: ").append(voucherSerialNumber);
		}
		
		if (voucherGroupID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("voucherGroupID: ").append(voucherGroupID);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountNumber != null) {
			sb.append("accountNumber: ").append(accountNumber);
		}
		else {
			sb.append("accountNumber: <empty-required-field>");
		}
		
		if (accountCurrency != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountCurrency: ").append(accountCurrency);
		}
		
		if (subscriberNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subscriberNumber: ").append(subscriberNumber);
		}
		
		if (promotionAnnouncementCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionAnnouncementCode: ").append(promotionAnnouncementCode);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountInformationBeforeRefill != null) {
			sb.append("accountInformationBeforeRefill: ");
			accountInformationBeforeRefill.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("accountInformationBeforeRefill: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountInformationAfterRefill != null) {
			sb.append("accountInformationAfterRefill: ");
			accountInformationAfterRefill.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("accountInformationAfterRefill: <empty-required-field>");
		}
		
		if (refillPromoDivisionAmount != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("refillPromoDivisionAmount: ").append(refillPromoDivisionAmount);
		}
		
		if (supervisionDaysPromoPart != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supervisionDaysPromoPart: ").append(supervisionDaysPromoPart);
		}
		
		if (supervisionDaysSurplus != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supervisionDaysSurplus: ").append(supervisionDaysSurplus);
		}
		
		if (serviceFeeDaysPromoPart != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceFeeDaysPromoPart: ").append(serviceFeeDaysPromoPart);
		}
		
		if (serviceFeeDaysSurplus != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceFeeDaysSurplus: ").append(serviceFeeDaysSurplus);
		}
		
		if (maximumServiceFeePeriod != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maximumServiceFeePeriod: ").append(maximumServiceFeePeriod);
		}
		
		if (maximumSupervisionPeriod != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maximumSupervisionPeriod: ").append(maximumSupervisionPeriod);
		}
		
		if (activationDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("activationDate: ").append(activationDate);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (welcomeStatus != null) {
			sb.append("welcomeStatus: ").append(welcomeStatus);
		}
		else {
			sb.append("welcomeStatus: <empty-required-field>");
		}
		
		if (voucherAgent != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("voucherAgent: ").append(voucherAgent);
		}
		
		if (promotionPlanAllocStartDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionPlanAllocStartDate: ").append(promotionPlanAllocStartDate);
		}
		
		if (accountGroupId != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountGroupId: ").append(accountGroupId);
		}
		
		if (externalData1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("externalData1: ").append(externalData1);
		}
		
		if (externalData2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("externalData2: ").append(externalData2);
		}
		
		if (externalData3 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("externalData3: ").append(externalData3);
		}
		
		if (externalData4 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("externalData4: ").append(externalData4);
		}
		
		if (locationNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("locationNumber: ").append(locationNumber);
		}
		
		if (voucherActivationCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("voucherActivationCode: ").append(voucherActivationCode);
		}
		
		if (accountCurrencyCleared != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountCurrencyCleared: ").append(accountCurrencyCleared);
		}
		
		if (ignoreServiceClassHierarchy != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ignoreServiceClassHierarchy: ").append(ignoreServiceClassHierarchy);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (selectionTreeParameter != null) {
			sb.append("selectionTreeParameter: ");
			selectionTreeParameter.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("selectionTreeParameter: <empty-required-field>");
		}
		
		if (treeDefinedFields != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("treeDefinedFields: ");
			treeDefinedFields.appendAsString(sb, indentLevel + 1);
		}
		
		if (accountHomeRegion != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountHomeRegion: ").append(accountHomeRegion);
		}
		
		if (subscriberRegion != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subscriberRegion: ").append(subscriberRegion);
		}
		
		if (voucherRegion != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("voucherRegion: ").append(voucherRegion);
		}
		
		if (promotionPlanAllocEndDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("promotionPlanAllocEndDate: ").append(promotionPlanAllocEndDate);
		}
		
		if (requestedRefillType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("requestedRefillType: ").append(requestedRefillType);
		}
		
		if (cellIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cellIdentifier: ").append(cellIdentifier);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

